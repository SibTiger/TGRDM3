// OpenGL Lighting Fallback System
// ----
// This script is designed to automatically adjust the lighting based
//  on the end user's settings and preferences.  If the user does not have the
//  Dynamic Lights enabled or if the OpenGL renderer is not enabled
//  from the end-user's configuration, this script will try to adjust the
//  lighting as much as possible.  This implementation may not be perfect,
//  however, this will assure that the user's can visually see the virtual
//  world instead of being left in the dark, literally....
// ----



// Environment Light Driver (fallback system)
// Special script that will try to adjust the map brightness
// ----
// Description
//      This script is designed to adjust the maps light value by inspecting
//          the user's OpenGL configuration settings.  What is fundamentally important
//          is wither the user is actually using the OpenGL renderer and if
//          Dynamic Lights is enabled or disabled.  Based on these settings,
//          this script will adjust the lighting to be brighter - so it is easier
//          for the players to see the map rather than living in pour darkness,
//          or if the lighting should be restored to its base source if the user
//          re-enables dynamic lights and using the OpenGL renderer.
// ----
// Parameters
//      baseLight <int>
//          The default light value of the entire map.
//      newLight <int>
//          Recommended brightness adjustment if GL lighting is not available.
//      maxSectorTag <int>
//          Sector tags that will be altered with the changes from tag range [0 -> x]
SCRIPT "EnvironmentLight_Driver" (int baseLight, int newLight, int maxSectorTag) CLIENTSIDE
{
    // Debug message
        //print(s:"Base light: ", i:baseLight, s:" - New Light: ", i:newLight, s:" - Max Tags: ", i:maxSectorTag);
    
    // First check to see if the OpenGL renderer is actually enabled on the host system
    //  This code is still on the based assumption that users MUST restart GZDoom in-order
    //  to switch from the Software renderer to OpenGL renderer.
    //  IIF (if and only if) GZDoom changes this scheme, than this code will surely break
    //  from the start.
    
    if (!GetCVar("Vid_Renderer"))
    {
        EnvironmentLight_Process(newLight, maxSectorTag);
        Terminate;
    } // OpenGL was false
    
    
    // We're going to use a cache variable to maintain the previous setting of the GL_Lights CVar.
    bool cacheLights = true;  // Assume default is true.
    
    do
    {
        if(GetCVar("GL_Lights") && !cacheLights)
        {
            EnvironmentLight_Process(baseLight, maxSectorTag);
            cacheLights = !cacheLights;
        } // GL Lights is on
        
        
        
        if(!GetCVar("GL_Lights") && cacheLights)
        {
            EnvironmentLight_Process(newLight, maxSectorTag);
            cacheLights = !cacheLights;
        } // GL Lights is off
        
        // Slight pause
            Delay (1);
    } while (true);
} // EnvironmentLight_Driver()




// Updates the sector references lighting
// This function is designed to perform the main task of altering the light values.
// ----
// Description
//      This small function will adjust the brightness level within the map at the
//          given sector tag ranges from 0 to max value.
// ----
// Parameters
//      lightValue <int>
//          The brightness level that will be applied to the sectors.
//      maxSectorTags <int>
//          Sector tags that will be altered with the changes from tag range [0 -> x]
function void EnvironmentLight_Process (int lightValue, int maxSectorTags)
{
    for(int i = 0; i < maxSectorTags; i++)
        Light_ChangeToValue(i, lightValue);
    return;
} // EnvironmentLight_Process()