// Music Player Algorithm
// ----
// This algorithm is designed to automatically rotate through a randomized playlist and change to the next song after so
//  much time has been lapsed.  The overall idea of this feature is to provide a fresher experience overall when playing
//  through each map, thus it doesn't feel like the exact environment each time when the user goes through the maps after so
//  many times.
// This algorithm requires no interation from the user and is not customizable to the end-user perspective.
// ----



//        << ! ACHTUNG ! >>
// ===============================
// The size of the music play list.
//  If adding more music, please update only this variable and then make the
//  appropriate changes in the SNDINFO using $MusicAlias while keeping the
//  original formatting schematic of 'MUS##'.  Using anything other than 'MUS##'
//  will fail, so you MUST use 'MUS##'.  For example: 'MUS00' or 'MUS39' is legal, but 'MyUltraCoolMP3ExclamationMarkTimes3' will not work.
#define MusicPlayListSize 39
// If adding music, you do NOT need to edit anything else in this script.
// ----



// Music Play List Array
global str 1: MusicPlayList[];

// PlayList Ready [Generated, shuffled]
global int 2: MusicPlayListReady;

// PlayList Highlight [points to highlighted index]
global int 3: MusicPlayListHighlight;



// TODO: This function needs an overhaul
// Front end Music Player Driver
SCRIPT "MusicPlayer" OPEN
{
    // Since this function\script is always going to reload on each map load
    //  we have to make sure that the play list array is ready for use.
    //  We do not need to regenerate the array on each map load and waste
    //  the end-users system resources.  Instead, lets try to optimize it
    //  at the fullest possible.
    if (!MusicPlayListReady)
        // Play list is not ready yet; populate and generate the play list.
        GenerateMusicPlayList();
        
    // Play list is ready to be used
    // Lay down that boogie and play that funky music till you die
    //  Wild Cherry - Play That Funky Music, White Boy
    //  I had too ;)
            ACS_NamedExecute("MusicPlayer_BackEnd", 0, 0, 0, 0);
} // MusicPlayer()



SCRIPT "MusicPlayer_BackEnd" (VOID)
{
    do
    {
        if (MusicPlayListReady)
        {
            // Fade out current music
                ACS_NamedExecuteWait("MusicFade", 0, 0, 17, 0);
            // Change the song
                SetGameMusic(MusicPlayListHighlight);
            // Fade in the next song
                ACS_NamedExecuteWait("MusicFade", 0, 1, 17, 0);
            // Wait
                Delay(35*75);
            // Move the Music Play List Highlight to the next index.
                UpdatePlayListHighlight();
            // If the highlighted index is now '0', regenerate the playlist.
                GenerateMusicPlayList();
        } // if (play list is ready)
    } while (1);
} // MusicPlayer_BackEnd()



// This is a dedicated function to increment the array highlighter,
//  but also makes sure that the highlighter stays within the sprectrum
//  of the array and not outside.
function void UpdatePlayListHighlight (void)
{
    // Make sure that the highlighter stays inside the array.
    if (MusicPlayListHighlight <= (MusicPlayListSize))
        // The highlighter is out of boundary; start back to zero.
        MusicPlayListHighlight = 0;
    else
        // Increment the highlighter to the index.
        MusicPlayListHighlight++;
} // UpdatePlayListHighlight()



// Make the play list array ready for use.
//  Build up the array and shuffle it.
function void GenerateMusicPlayList (VOID)
{
    // Mark the playlist as not ready for use.
        MusicPlayListReady = false;
    // Auto-fill the array
        MusicPlayList_AutoFill();
    // Shuffle the playlist
        MusicPlayer_ShufflePlayList();
    // Music play list is now ready for use
        MusicPlayListReady = true;
} // GenerateMusicPlayList()



// This function is designed to take the music array and randomly reoganize it.
// We're going to use the Fisher-Yates Shuffle Modern Algorithm
//  We start from the ending of the array and simply shuffle the array from
//  the beginning to the tail ending of the array list.  In the next pass, we'll
//  shift from the tail ending to the index before the tail ending, and do the
//  routine again.  We continue this routine until we hit index 0.  This is an
//  unbias algorithm and should be efficient enough.  Although with ZDoom's Random
//  ACS function, I can't guarantee the best randomization results.
// Algorithm: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
function void MusicPlayer_ShufflePlayList (void)
{
    // Declarations needed for the algorithm
        // Used for randomly selected indexes
            int n;
        // Keeps the value of the highlighted index
            int temp;
    // ----

    // Randomization algorithm
    for (int i = (MusicPlayListSize - 1); i > 0; --i)
    {
        // Fetch a random index to switch with another index.
            n = Random(0,i);
        
        // Only switch index values if and only if the randomly selected
        //  index is NOT the highlighted index itself.
        if (n != i)
        {
            // Save the highlighted index (not randomized) to a variable
                temp = MusicPlayList[i];
            // Switch the randomly selected index with the highlighted index.
                MusicPlayList[i] = MusicPlayList[n];
            // Replace the randomly selected index's value with the highlited index.
                MusicPlayList[n] = temp;
        } // if
    } // for
} // ReorganizeArray()



// Output the array
//  This function is only useful for debugging purposes.
function void OutputArray (void)
{
    for(int i = 0; i < MusicPlayListSize; i++)
        Log(s:"Index: ", i:i, s:" Value is: ", s:MusicPlayList[i]);
}  // OutputArray()



// This function is designed to fade the music in or out.
//  This is illusion of crossfading between one one song to another.
//  This merely isn't a perfect implementation, but - it's better than
//  shifting to something soft and easy listening like Marvin Gaye and
//  immediately you notice your ears are bleeding with Mudvayne screaming
//  in your ears.  So, with this fade - you'll mentally accept the song
//  transitioning.
//
// FIXED POINT NUMBERS WARNING {Because I hate them; READ THIS}
//  http://zdoom.org/wiki/Fixed_point_number
// ----
// Parameters:
//  fadeType <int>
//      Determines the type of fading.
//      0 = Fade out; stop music
//      1 = Fade in; play music
//  faderSpeed <int>
//      The tic-rate in which to fade the music in or out.
//      Recommended value: 17tics
SCRIPT "MusicFade" (int fadeType, int faderSpeed)
{
    // Declarations
        // This variable is going to be used as a base in terms of
        //  fading in or out.
            int fixedFader;
    // ----

        // Fade out
        if (!fadeType)
        {
            // Update the variable.
            fixedFader = 1.0;
            
            // Fade out effect
            do
            {
                SetMusicVolume(fixedFader);
                fixedFader -= 0.1;
                delay(faderSpeed);
            } while(fixedFader >= 0.0);
        } // if (fadeType = 0)
        
        
        // Fade in
        if (fadeType)
        {
            // Update the variable.
            fixedFader = 0.1;
            
            // Fade in effect
            do
            {
                SetMusicVolume(fixedFader);
                fixedFader += 0.1;
                delay(faderSpeed);
            } while (fixedFader <= 1.0);
        } // if (fadeType = 1)
} // MusicFade()



// Sets the music for all clients to the desired song.
// ----
// Parameters:
//  musicIndex <int>
//      The selected index from the play list array.
function void SetGameMusic (int musicIndex)
{
    SetMusic(MusicPlayList[musicIndex]);
} // SetGameMusic()



// Auto-fill the play list array with 'MUS$num' formatting
//  Where $num is the size of the array, inwhich is dependent on the variable
//  'MusicPlayListSize' <int>.
function void MusicPlayList_AutoFill (VOID)
{
    // Automatically fill up the array with 'MUS##'.
    // For example: MUS00, MUS01, MUS02, etc.
    // The limit is defined by (MusicPlayListSize - 1)
        for (int i = 0; i < MusicPlayListSize; i++)
            MusicPlayList[i] = StrParam(s:"MUS", i:i);
} // MusicPlayList_AutoFill()